//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace webprintDesigner.UserServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserImages", Namespace="http://schemas.datacontract.org/2004/07/TemplateDesigner.Models")]
    public partial class UserImages : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ImageAbsolutePathField;
        
        private int ImageHeightField;
        
        private string ImageNameField;
        
        private string ImageRelativePathField;
        
        private int ImageWidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageAbsolutePath {
            get {
                return this.ImageAbsolutePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageAbsolutePathField, value) != true)) {
                    this.ImageAbsolutePathField = value;
                    this.RaisePropertyChanged("ImageAbsolutePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageHeight {
            get {
                return this.ImageHeightField;
            }
            set {
                if ((this.ImageHeightField.Equals(value) != true)) {
                    this.ImageHeightField = value;
                    this.RaisePropertyChanged("ImageHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageRelativePath {
            get {
                return this.ImageRelativePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageRelativePathField, value) != true)) {
                    this.ImageRelativePathField = value;
                    this.RaisePropertyChanged("ImageRelativePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageWidth {
            get {
                return this.ImageWidthField;
            }
            set {
                if ((this.ImageWidthField.Equals(value) != true)) {
                    this.ImageWidthField = value;
                    this.RaisePropertyChanged("ImageWidth");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/IsUserLogined", ReplyAction="http://tempuri.org/IUserService/IsUserLoginedResponse")]
        System.IAsyncResult BeginIsUserLogined(int Mode, System.AsyncCallback callback, object asyncState);
        
        bool EndIsUserLogined(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/UserLogin", ReplyAction="http://tempuri.org/IUserService/UserLoginResponse")]
        System.IAsyncResult BeginUserLogin(string UserName, string UserPassword, int Mode, System.AsyncCallback callback, object asyncState);
        
        bool EndUserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/GetUserImages", ReplyAction="http://tempuri.org/IUserService/GetUserImagesResponse")]
        System.IAsyncResult BeginGetUserImages(int Mode, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages> EndGetUserImages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/CropImage", ReplyAction="http://tempuri.org/IUserService/CropImageResponse")]
        System.IAsyncResult BeginCropImage(string ImgName, int ImgX, int ImgY, int ImgWidth, int ImgHeight, int Mode, System.AsyncCallback callback, object asyncState);
        
        webprintDesigner.UserServiceReference.UserImages EndCropImage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : webprintDesigner.UserServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsUserLoginedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsUserLoginedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CropImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CropImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public webprintDesigner.UserServiceReference.UserImages Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((webprintDesigner.UserServiceReference.UserImages)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<webprintDesigner.UserServiceReference.IUserService>, webprintDesigner.UserServiceReference.IUserService {
        
        private BeginOperationDelegate onBeginIsUserLoginedDelegate;
        
        private EndOperationDelegate onEndIsUserLoginedDelegate;
        
        private System.Threading.SendOrPostCallback onIsUserLoginedCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserLoginDelegate;
        
        private EndOperationDelegate onEndUserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onUserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserImagesDelegate;
        
        private EndOperationDelegate onEndGetUserImagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserImagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginCropImageDelegate;
        
        private EndOperationDelegate onEndCropImageDelegate;
        
        private System.Threading.SendOrPostCallback onCropImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IsUserLoginedCompletedEventArgs> IsUserLoginedCompleted;
        
        public event System.EventHandler<UserLoginCompletedEventArgs> UserLoginCompleted;
        
        public event System.EventHandler<GetUserImagesCompletedEventArgs> GetUserImagesCompleted;
        
        public event System.EventHandler<CropImageCompletedEventArgs> CropImageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult webprintDesigner.UserServiceReference.IUserService.BeginIsUserLogined(int Mode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsUserLogined(Mode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool webprintDesigner.UserServiceReference.IUserService.EndIsUserLogined(System.IAsyncResult result) {
            return base.Channel.EndIsUserLogined(result);
        }
        
        private System.IAsyncResult OnBeginIsUserLogined(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int Mode = ((int)(inValues[0]));
            return ((webprintDesigner.UserServiceReference.IUserService)(this)).BeginIsUserLogined(Mode, callback, asyncState);
        }
        
        private object[] OnEndIsUserLogined(System.IAsyncResult result) {
            bool retVal = ((webprintDesigner.UserServiceReference.IUserService)(this)).EndIsUserLogined(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsUserLoginedCompleted(object state) {
            if ((this.IsUserLoginedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsUserLoginedCompleted(this, new IsUserLoginedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsUserLoginedAsync(int Mode) {
            this.IsUserLoginedAsync(Mode, null);
        }
        
        public void IsUserLoginedAsync(int Mode, object userState) {
            if ((this.onBeginIsUserLoginedDelegate == null)) {
                this.onBeginIsUserLoginedDelegate = new BeginOperationDelegate(this.OnBeginIsUserLogined);
            }
            if ((this.onEndIsUserLoginedDelegate == null)) {
                this.onEndIsUserLoginedDelegate = new EndOperationDelegate(this.OnEndIsUserLogined);
            }
            if ((this.onIsUserLoginedCompletedDelegate == null)) {
                this.onIsUserLoginedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsUserLoginedCompleted);
            }
            base.InvokeAsync(this.onBeginIsUserLoginedDelegate, new object[] {
                        Mode}, this.onEndIsUserLoginedDelegate, this.onIsUserLoginedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult webprintDesigner.UserServiceReference.IUserService.BeginUserLogin(string UserName, string UserPassword, int Mode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserLogin(UserName, UserPassword, Mode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool webprintDesigner.UserServiceReference.IUserService.EndUserLogin(System.IAsyncResult result) {
            return base.Channel.EndUserLogin(result);
        }
        
        private System.IAsyncResult OnBeginUserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            int Mode = ((int)(inValues[2]));
            return ((webprintDesigner.UserServiceReference.IUserService)(this)).BeginUserLogin(UserName, UserPassword, Mode, callback, asyncState);
        }
        
        private object[] OnEndUserLogin(System.IAsyncResult result) {
            bool retVal = ((webprintDesigner.UserServiceReference.IUserService)(this)).EndUserLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserLoginCompleted(object state) {
            if ((this.UserLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserLoginCompleted(this, new UserLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserLoginAsync(string UserName, string UserPassword, int Mode) {
            this.UserLoginAsync(UserName, UserPassword, Mode, null);
        }
        
        public void UserLoginAsync(string UserName, string UserPassword, int Mode, object userState) {
            if ((this.onBeginUserLoginDelegate == null)) {
                this.onBeginUserLoginDelegate = new BeginOperationDelegate(this.OnBeginUserLogin);
            }
            if ((this.onEndUserLoginDelegate == null)) {
                this.onEndUserLoginDelegate = new EndOperationDelegate(this.OnEndUserLogin);
            }
            if ((this.onUserLoginCompletedDelegate == null)) {
                this.onUserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginUserLoginDelegate, new object[] {
                        UserName,
                        UserPassword,
                        Mode}, this.onEndUserLoginDelegate, this.onUserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult webprintDesigner.UserServiceReference.IUserService.BeginGetUserImages(int Mode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserImages(Mode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages> webprintDesigner.UserServiceReference.IUserService.EndGetUserImages(System.IAsyncResult result) {
            return base.Channel.EndGetUserImages(result);
        }
        
        private System.IAsyncResult OnBeginGetUserImages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int Mode = ((int)(inValues[0]));
            return ((webprintDesigner.UserServiceReference.IUserService)(this)).BeginGetUserImages(Mode, callback, asyncState);
        }
        
        private object[] OnEndGetUserImages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages> retVal = ((webprintDesigner.UserServiceReference.IUserService)(this)).EndGetUserImages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserImagesCompleted(object state) {
            if ((this.GetUserImagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserImagesCompleted(this, new GetUserImagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserImagesAsync(int Mode) {
            this.GetUserImagesAsync(Mode, null);
        }
        
        public void GetUserImagesAsync(int Mode, object userState) {
            if ((this.onBeginGetUserImagesDelegate == null)) {
                this.onBeginGetUserImagesDelegate = new BeginOperationDelegate(this.OnBeginGetUserImages);
            }
            if ((this.onEndGetUserImagesDelegate == null)) {
                this.onEndGetUserImagesDelegate = new EndOperationDelegate(this.OnEndGetUserImages);
            }
            if ((this.onGetUserImagesCompletedDelegate == null)) {
                this.onGetUserImagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserImagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserImagesDelegate, new object[] {
                        Mode}, this.onEndGetUserImagesDelegate, this.onGetUserImagesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult webprintDesigner.UserServiceReference.IUserService.BeginCropImage(string ImgName, int ImgX, int ImgY, int ImgWidth, int ImgHeight, int Mode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCropImage(ImgName, ImgX, ImgY, ImgWidth, ImgHeight, Mode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        webprintDesigner.UserServiceReference.UserImages webprintDesigner.UserServiceReference.IUserService.EndCropImage(System.IAsyncResult result) {
            return base.Channel.EndCropImage(result);
        }
        
        private System.IAsyncResult OnBeginCropImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ImgName = ((string)(inValues[0]));
            int ImgX = ((int)(inValues[1]));
            int ImgY = ((int)(inValues[2]));
            int ImgWidth = ((int)(inValues[3]));
            int ImgHeight = ((int)(inValues[4]));
            int Mode = ((int)(inValues[5]));
            return ((webprintDesigner.UserServiceReference.IUserService)(this)).BeginCropImage(ImgName, ImgX, ImgY, ImgWidth, ImgHeight, Mode, callback, asyncState);
        }
        
        private object[] OnEndCropImage(System.IAsyncResult result) {
            webprintDesigner.UserServiceReference.UserImages retVal = ((webprintDesigner.UserServiceReference.IUserService)(this)).EndCropImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCropImageCompleted(object state) {
            if ((this.CropImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CropImageCompleted(this, new CropImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CropImageAsync(string ImgName, int ImgX, int ImgY, int ImgWidth, int ImgHeight, int Mode) {
            this.CropImageAsync(ImgName, ImgX, ImgY, ImgWidth, ImgHeight, Mode, null);
        }
        
        public void CropImageAsync(string ImgName, int ImgX, int ImgY, int ImgWidth, int ImgHeight, int Mode, object userState) {
            if ((this.onBeginCropImageDelegate == null)) {
                this.onBeginCropImageDelegate = new BeginOperationDelegate(this.OnBeginCropImage);
            }
            if ((this.onEndCropImageDelegate == null)) {
                this.onEndCropImageDelegate = new EndOperationDelegate(this.OnEndCropImage);
            }
            if ((this.onCropImageCompletedDelegate == null)) {
                this.onCropImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCropImageCompleted);
            }
            base.InvokeAsync(this.onBeginCropImageDelegate, new object[] {
                        ImgName,
                        ImgX,
                        ImgY,
                        ImgWidth,
                        ImgHeight,
                        Mode}, this.onEndCropImageDelegate, this.onCropImageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override webprintDesigner.UserServiceReference.IUserService CreateChannel() {
            return new UserServiceClientChannel(this);
        }
        
        private class UserServiceClientChannel : ChannelBase<webprintDesigner.UserServiceReference.IUserService>, webprintDesigner.UserServiceReference.IUserService {
            
            public UserServiceClientChannel(System.ServiceModel.ClientBase<webprintDesigner.UserServiceReference.IUserService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIsUserLogined(int Mode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Mode;
                System.IAsyncResult _result = base.BeginInvoke("IsUserLogined", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsUserLogined(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsUserLogined", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUserLogin(string UserName, string UserPassword, int Mode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = UserName;
                _args[1] = UserPassword;
                _args[2] = Mode;
                System.IAsyncResult _result = base.BeginInvoke("UserLogin", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UserLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserImages(int Mode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Mode;
                System.IAsyncResult _result = base.BeginInvoke("GetUserImages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages> EndGetUserImages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages> _result = ((System.Collections.ObjectModel.ObservableCollection<webprintDesigner.UserServiceReference.UserImages>)(base.EndInvoke("GetUserImages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCropImage(string ImgName, int ImgX, int ImgY, int ImgWidth, int ImgHeight, int Mode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = ImgName;
                _args[1] = ImgX;
                _args[2] = ImgY;
                _args[3] = ImgWidth;
                _args[4] = ImgHeight;
                _args[5] = Mode;
                System.IAsyncResult _result = base.BeginInvoke("CropImage", _args, callback, asyncState);
                return _result;
            }
            
            public webprintDesigner.UserServiceReference.UserImages EndCropImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                webprintDesigner.UserServiceReference.UserImages _result = ((webprintDesigner.UserServiceReference.UserImages)(base.EndInvoke("CropImage", _args, result)));
                return _result;
            }
        }
    }
}
