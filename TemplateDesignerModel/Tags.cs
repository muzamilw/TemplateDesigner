//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TemplateDesignerModelTypes
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TemplateThemeTags))]
    [KnownType(typeof(TemplateIndustryTags))]
    public partial class Tags: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TagID
        {
            get { return _tagID; }
            set
            {
                if (_tagID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TagID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tagID = value;
                    OnPropertyChanged("TagID");
                }
            }
        }
        private int _tagID;
    
        [DataMember]
        public string TagName
        {
            get { return _tagName; }
            set
            {
                if (_tagName != value)
                {
                    _tagName = value;
                    OnPropertyChanged("TagName");
                }
            }
        }
        private string _tagName;
    
        [DataMember]
        public string TagSlug
        {
            get { return _tagSlug; }
            set
            {
                if (_tagSlug != value)
                {
                    _tagSlug = value;
                    OnPropertyChanged("TagSlug");
                }
            }
        }
        private string _tagSlug;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private string _type;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TemplateThemeTags> TemplateThemeTags
        {
            get
            {
                if (_templateThemeTags == null)
                {
                    _templateThemeTags = new TrackableCollection<TemplateThemeTags>();
                    _templateThemeTags.CollectionChanged += FixupTemplateThemeTags;
                }
                return _templateThemeTags;
            }
            set
            {
                if (!ReferenceEquals(_templateThemeTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateThemeTags != null)
                    {
                        _templateThemeTags.CollectionChanged -= FixupTemplateThemeTags;
                    }
                    _templateThemeTags = value;
                    if (_templateThemeTags != null)
                    {
                        _templateThemeTags.CollectionChanged += FixupTemplateThemeTags;
                    }
                    OnNavigationPropertyChanged("TemplateThemeTags");
                }
            }
        }
        private TrackableCollection<TemplateThemeTags> _templateThemeTags;
    
        [DataMember]
        public TrackableCollection<TemplateIndustryTags> TemplateIndustryTags
        {
            get
            {
                if (_templateIndustryTags == null)
                {
                    _templateIndustryTags = new TrackableCollection<TemplateIndustryTags>();
                    _templateIndustryTags.CollectionChanged += FixupTemplateIndustryTags;
                }
                return _templateIndustryTags;
            }
            set
            {
                if (!ReferenceEquals(_templateIndustryTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateIndustryTags != null)
                    {
                        _templateIndustryTags.CollectionChanged -= FixupTemplateIndustryTags;
                    }
                    _templateIndustryTags = value;
                    if (_templateIndustryTags != null)
                    {
                        _templateIndustryTags.CollectionChanged += FixupTemplateIndustryTags;
                    }
                    OnNavigationPropertyChanged("TemplateIndustryTags");
                }
            }
        }
        private TrackableCollection<TemplateIndustryTags> _templateIndustryTags;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TemplateThemeTags.Clear();
            TemplateIndustryTags.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupTemplateThemeTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateThemeTags item in e.NewItems)
                {
                    item.Tags = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateThemeTags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateThemeTags item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tags, this))
                    {
                        item.Tags = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateThemeTags", item);
                    }
                }
            }
        }
    
        private void FixupTemplateIndustryTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateIndustryTags item in e.NewItems)
                {
                    item.Tags = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateIndustryTags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateIndustryTags item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tags, this))
                    {
                        item.Tags = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateIndustryTags", item);
                    }
                }
            }
        }

        #endregion
    }
}
