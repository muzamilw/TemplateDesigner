//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TemplateDesignerModelTypes
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Templates))]
    public partial class TemplateBackgroundImages: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<int> ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductID", _productID);
                    if (!IsDeserializing)
                    {
                        if (Templates != null && Templates.ProductID != value)
                        {
                            Templates = null;
                        }
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private Nullable<int> _productID;
    
        [DataMember]
        public string ImageName
        {
            get { return _imageName; }
            set
            {
                if (_imageName != value)
                {
                    _imageName = value;
                    OnPropertyChanged("ImageName");
                }
            }
        }
        private string _imageName;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<bool> flgPhotobook
        {
            get { return _flgPhotobook; }
            set
            {
                if (_flgPhotobook != value)
                {
                    _flgPhotobook = value;
                    OnPropertyChanged("flgPhotobook");
                }
            }
        }
        private Nullable<bool> _flgPhotobook;
    
        [DataMember]
        public Nullable<bool> flgCover
        {
            get { return _flgCover; }
            set
            {
                if (_flgCover != value)
                {
                    _flgCover = value;
                    OnPropertyChanged("flgCover");
                }
            }
        }
        private Nullable<bool> _flgCover;
    
        [DataMember]
        public string BackgroundImageAbsolutePath
        {
            get { return _backgroundImageAbsolutePath; }
            set
            {
                if (_backgroundImageAbsolutePath != value)
                {
                    _backgroundImageAbsolutePath = value;
                    OnPropertyChanged("BackgroundImageAbsolutePath");
                }
            }
        }
        private string _backgroundImageAbsolutePath;
    
        [DataMember]
        public string BackgroundImageRelativePath
        {
            get { return _backgroundImageRelativePath; }
            set
            {
                if (_backgroundImageRelativePath != value)
                {
                    _backgroundImageRelativePath = value;
                    OnPropertyChanged("BackgroundImageRelativePath");
                }
            }
        }
        private string _backgroundImageRelativePath;
    
        [DataMember]
        public Nullable<int> ImageType
        {
            get { return _imageType; }
            set
            {
                if (_imageType != value)
                {
                    _imageType = value;
                    OnPropertyChanged("ImageType");
                }
            }
        }
        private Nullable<int> _imageType;
    
        [DataMember]
        public Nullable<int> ImageWidth
        {
            get { return _imageWidth; }
            set
            {
                if (_imageWidth != value)
                {
                    _imageWidth = value;
                    OnPropertyChanged("ImageWidth");
                }
            }
        }
        private Nullable<int> _imageWidth;
    
        [DataMember]
        public Nullable<int> ImageHeight
        {
            get { return _imageHeight; }
            set
            {
                if (_imageHeight != value)
                {
                    _imageHeight = value;
                    OnPropertyChanged("ImageHeight");
                }
            }
        }
        private Nullable<int> _imageHeight;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Templates Templates
        {
            get { return _templates; }
            set
            {
                if (!ReferenceEquals(_templates, value))
                {
                    var previousValue = _templates;
                    _templates = value;
                    FixupTemplates(previousValue);
                    OnNavigationPropertyChanged("Templates");
                }
            }
        }
        private Templates _templates;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Templates = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTemplates(Templates previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TemplateBackgroundImages.Contains(this))
            {
                previousValue.TemplateBackgroundImages.Remove(this);
            }
    
            if (Templates != null)
            {
                if (!Templates.TemplateBackgroundImages.Contains(this))
                {
                    Templates.TemplateBackgroundImages.Add(this);
                }
    
                ProductID = Templates.ProductID;
            }
            else if (!skipKeys)
            {
                ProductID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Templates")
                    && (ChangeTracker.OriginalValues["Templates"] == Templates))
                {
                    ChangeTracker.OriginalValues.Remove("Templates");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Templates", previousValue);
                }
                if (Templates != null && !Templates.ChangeTracker.ChangeTrackingEnabled)
                {
                    Templates.StartTracking();
                }
            }
        }

        #endregion
    }
}
