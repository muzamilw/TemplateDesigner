//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TemplateDesignerModelTypes
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Templates))]
    public partial class TemplateFontStyles: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int FontStyleID
        {
            get { return _fontStyleID; }
            set
            {
                if (_fontStyleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FontStyleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fontStyleID = value;
                    OnPropertyChanged("FontStyleID");
                }
            }
        }
        private int _fontStyleID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string FontName
        {
            get { return _fontName; }
            set
            {
                if (_fontName != value)
                {
                    _fontName = value;
                    OnPropertyChanged("FontName");
                }
            }
        }
        private string _fontName;
    
        [DataMember]
        public double Size
        {
            get { return _size; }
            set
            {
                if (_size != value)
                {
                    _size = value;
                    OnPropertyChanged("Size");
                }
            }
        }
        private double _size;
    
        [DataMember]
        public double TheadingValue
        {
            get { return _theadingValue; }
            set
            {
                if (_theadingValue != value)
                {
                    _theadingValue = value;
                    OnPropertyChanged("TheadingValue");
                }
            }
        }
        private double _theadingValue;
    
        [DataMember]
        public int TheadingUnit
        {
            get { return _theadingUnit; }
            set
            {
                if (_theadingUnit != value)
                {
                    _theadingUnit = value;
                    OnPropertyChanged("TheadingUnit");
                }
            }
        }
        private int _theadingUnit;
    
        [DataMember]
        public string TrackingDirective
        {
            get { return _trackingDirective; }
            set
            {
                if (_trackingDirective != value)
                {
                    _trackingDirective = value;
                    OnPropertyChanged("TrackingDirective");
                }
            }
        }
        private string _trackingDirective;
    
        [DataMember]
        public int Allignment
        {
            get { return _allignment; }
            set
            {
                if (_allignment != value)
                {
                    _allignment = value;
                    OnPropertyChanged("Allignment");
                }
            }
        }
        private int _allignment;
    
        [DataMember]
        public double Indent
        {
            get { return _indent; }
            set
            {
                if (_indent != value)
                {
                    _indent = value;
                    OnPropertyChanged("Indent");
                }
            }
        }
        private double _indent;
    
        [DataMember]
        public bool IsUnderlined
        {
            get { return _isUnderlined; }
            set
            {
                if (_isUnderlined != value)
                {
                    _isUnderlined = value;
                    OnPropertyChanged("IsUnderlined");
                }
            }
        }
        private bool _isUnderlined;
    
        [DataMember]
        public bool IsAllCapital
        {
            get { return _isAllCapital; }
            set
            {
                if (_isAllCapital != value)
                {
                    _isAllCapital = value;
                    OnPropertyChanged("IsAllCapital");
                }
            }
        }
        private bool _isAllCapital;
    
        [DataMember]
        public int ColorPelleteID
        {
            get { return _colorPelleteID; }
            set
            {
                if (_colorPelleteID != value)
                {
                    _colorPelleteID = value;
                    OnPropertyChanged("ColorPelleteID");
                }
            }
        }
        private int _colorPelleteID;
    
        [DataMember]
        public int ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductID", _productID);
                    if (!IsDeserializing)
                    {
                        if (Templates != null && Templates.ProductID != value)
                        {
                            Templates = null;
                        }
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private int _productID;
    
        [DataMember]
        public bool IsPrivateFontName
        {
            get { return _isPrivateFontName; }
            set
            {
                if (_isPrivateFontName != value)
                {
                    _isPrivateFontName = value;
                    OnPropertyChanged("IsPrivateFontName");
                }
            }
        }
        private bool _isPrivateFontName;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Templates Templates
        {
            get { return _templates; }
            set
            {
                if (!ReferenceEquals(_templates, value))
                {
                    var previousValue = _templates;
                    _templates = value;
                    FixupTemplates(previousValue);
                    OnNavigationPropertyChanged("Templates");
                }
            }
        }
        private Templates _templates;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Templates = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTemplates(Templates previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TemplateFontStyles.Contains(this))
            {
                previousValue.TemplateFontStyles.Remove(this);
            }
    
            if (Templates != null)
            {
                if (!Templates.TemplateFontStyles.Contains(this))
                {
                    Templates.TemplateFontStyles.Add(this);
                }
    
                ProductID = Templates.ProductID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Templates")
                    && (ChangeTracker.OriginalValues["Templates"] == Templates))
                {
                    ChangeTracker.OriginalValues.Remove("Templates");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Templates", previousValue);
                }
                if (Templates != null && !Templates.ChangeTracker.ChangeTrackingEnabled)
                {
                    Templates.StartTracking();
                }
            }
        }

        #endregion
    }
}
