//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TemplateDesignerModelTypes
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaseColors))]
    [KnownType(typeof(MatchingSets))]
    [KnownType(typeof(tbl_ProductCategory))]
    [KnownType(typeof(TemplateBackgroundImages))]
    [KnownType(typeof(TemplateColorStyles))]
    [KnownType(typeof(TemplateFonts))]
    [KnownType(typeof(TemplateFontStyles))]
    [KnownType(typeof(TemplateIndustryTags))]
    [KnownType(typeof(TemplateKeywords))]
    [KnownType(typeof(TemplateObjects))]
    [KnownType(typeof(TemplateThemeTags))]
    [KnownType(typeof(TemplateSide2Templates))]
    public partial class Templates: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private int _productID;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public string ProductName
        {
            get { return _productName; }
            set
            {
                if (_productName != value)
                {
                    _productName = value;
                    OnPropertyChanged("ProductName");
                }
            }
        }
        private string _productName;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> ProductCategoryID
        {
            get { return _productCategoryID; }
            set
            {
                if (_productCategoryID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductCategoryID", _productCategoryID);
                    if (!IsDeserializing)
                    {
                        if (tbl_ProductCategory != null && tbl_ProductCategory.ProductCategoryID != value)
                        {
                            tbl_ProductCategory = null;
                        }
                    }
                    _productCategoryID = value;
                    OnPropertyChanged("ProductCategoryID");
                }
            }
        }
        private Nullable<int> _productCategoryID;
    
        [DataMember]
        public string PDFTemplate
        {
            get { return _pDFTemplate; }
            set
            {
                if (_pDFTemplate != value)
                {
                    _pDFTemplate = value;
                    OnPropertyChanged("PDFTemplate");
                }
            }
        }
        private string _pDFTemplate;
    
        [DataMember]
        public string LowResPDFTemplates
        {
            get { return _lowResPDFTemplates; }
            set
            {
                if (_lowResPDFTemplates != value)
                {
                    _lowResPDFTemplates = value;
                    OnPropertyChanged("LowResPDFTemplates");
                }
            }
        }
        private string _lowResPDFTemplates;
    
        [DataMember]
        public string PrePrintPDFTemplates
        {
            get { return _prePrintPDFTemplates; }
            set
            {
                if (_prePrintPDFTemplates != value)
                {
                    _prePrintPDFTemplates = value;
                    OnPropertyChanged("PrePrintPDFTemplates");
                }
            }
        }
        private string _prePrintPDFTemplates;
    
        [DataMember]
        public string BackgroundArtwork
        {
            get { return _backgroundArtwork; }
            set
            {
                if (_backgroundArtwork != value)
                {
                    _backgroundArtwork = value;
                    OnPropertyChanged("BackgroundArtwork");
                }
            }
        }
        private string _backgroundArtwork;
    
        [DataMember]
        public string Side2PDFTemplate
        {
            get { return _side2PDFTemplate; }
            set
            {
                if (_side2PDFTemplate != value)
                {
                    _side2PDFTemplate = value;
                    OnPropertyChanged("Side2PDFTemplate");
                }
            }
        }
        private string _side2PDFTemplate;
    
        [DataMember]
        public string Side2LowResPDFTemplates
        {
            get { return _side2LowResPDFTemplates; }
            set
            {
                if (_side2LowResPDFTemplates != value)
                {
                    _side2LowResPDFTemplates = value;
                    OnPropertyChanged("Side2LowResPDFTemplates");
                }
            }
        }
        private string _side2LowResPDFTemplates;
    
        [DataMember]
        public string Side2PrePrintPDFTemplates
        {
            get { return _side2PrePrintPDFTemplates; }
            set
            {
                if (_side2PrePrintPDFTemplates != value)
                {
                    _side2PrePrintPDFTemplates = value;
                    OnPropertyChanged("Side2PrePrintPDFTemplates");
                }
            }
        }
        private string _side2PrePrintPDFTemplates;
    
        [DataMember]
        public string Side2BackgroundArtwork
        {
            get { return _side2BackgroundArtwork; }
            set
            {
                if (_side2BackgroundArtwork != value)
                {
                    _side2BackgroundArtwork = value;
                    OnPropertyChanged("Side2BackgroundArtwork");
                }
            }
        }
        private string _side2BackgroundArtwork;
    
        [DataMember]
        public string Thumbnail
        {
            get { return _thumbnail; }
            set
            {
                if (_thumbnail != value)
                {
                    _thumbnail = value;
                    OnPropertyChanged("Thumbnail");
                }
            }
        }
        private string _thumbnail;
    
        [DataMember]
        public string Image
        {
            get { return _image; }
            set
            {
                if (_image != value)
                {
                    _image = value;
                    OnPropertyChanged("Image");
                }
            }
        }
        private string _image;
    
        [DataMember]
        public Nullable<bool> IsDisabled
        {
            get { return _isDisabled; }
            set
            {
                if (_isDisabled != value)
                {
                    _isDisabled = value;
                    OnPropertyChanged("IsDisabled");
                }
            }
        }
        private Nullable<bool> _isDisabled;
    
        [DataMember]
        public Nullable<int> PTempId
        {
            get { return _pTempId; }
            set
            {
                if (_pTempId != value)
                {
                    _pTempId = value;
                    OnPropertyChanged("PTempId");
                }
            }
        }
        private Nullable<int> _pTempId;
    
        [DataMember]
        public Nullable<int> Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private Nullable<int> _type;
    
        [DataMember]
        public Nullable<bool> IsPrePrint
        {
            get { return _isPrePrint; }
            set
            {
                if (_isPrePrint != value)
                {
                    _isPrePrint = value;
                    OnPropertyChanged("IsPrePrint");
                }
            }
        }
        private Nullable<bool> _isPrePrint;
    
        [DataMember]
        public bool IsDoubleSide
        {
            get { return _isDoubleSide; }
            set
            {
                if (_isDoubleSide != value)
                {
                    _isDoubleSide = value;
                    OnPropertyChanged("IsDoubleSide");
                }
            }
        }
        private bool _isDoubleSide;
    
        [DataMember]
        public bool IsUsePDFFile
        {
            get { return _isUsePDFFile; }
            set
            {
                if (_isUsePDFFile != value)
                {
                    _isUsePDFFile = value;
                    OnPropertyChanged("IsUsePDFFile");
                }
            }
        }
        private bool _isUsePDFFile;
    
        [DataMember]
        public Nullable<double> PDFTemplateWidth
        {
            get { return _pDFTemplateWidth; }
            set
            {
                if (_pDFTemplateWidth != value)
                {
                    _pDFTemplateWidth = value;
                    OnPropertyChanged("PDFTemplateWidth");
                }
            }
        }
        private Nullable<double> _pDFTemplateWidth;
    
        [DataMember]
        public Nullable<double> PDFTemplateHeight
        {
            get { return _pDFTemplateHeight; }
            set
            {
                if (_pDFTemplateHeight != value)
                {
                    _pDFTemplateHeight = value;
                    OnPropertyChanged("PDFTemplateHeight");
                }
            }
        }
        private Nullable<double> _pDFTemplateHeight;
    
        [DataMember]
        public Nullable<bool> IsUseBackGroundColor
        {
            get { return _isUseBackGroundColor; }
            set
            {
                if (_isUseBackGroundColor != value)
                {
                    _isUseBackGroundColor = value;
                    OnPropertyChanged("IsUseBackGroundColor");
                }
            }
        }
        private Nullable<bool> _isUseBackGroundColor;
    
        [DataMember]
        public Nullable<int> BgR
        {
            get { return _bgR; }
            set
            {
                if (_bgR != value)
                {
                    _bgR = value;
                    OnPropertyChanged("BgR");
                }
            }
        }
        private Nullable<int> _bgR;
    
        [DataMember]
        public Nullable<int> BgG
        {
            get { return _bgG; }
            set
            {
                if (_bgG != value)
                {
                    _bgG = value;
                    OnPropertyChanged("BgG");
                }
            }
        }
        private Nullable<int> _bgG;
    
        [DataMember]
        public Nullable<int> BgB
        {
            get { return _bgB; }
            set
            {
                if (_bgB != value)
                {
                    _bgB = value;
                    OnPropertyChanged("BgB");
                }
            }
        }
        private Nullable<int> _bgB;
    
        [DataMember]
        public Nullable<bool> IsUseSide2BackGroundColor
        {
            get { return _isUseSide2BackGroundColor; }
            set
            {
                if (_isUseSide2BackGroundColor != value)
                {
                    _isUseSide2BackGroundColor = value;
                    OnPropertyChanged("IsUseSide2BackGroundColor");
                }
            }
        }
        private Nullable<bool> _isUseSide2BackGroundColor;
    
        [DataMember]
        public Nullable<int> Side2BgR
        {
            get { return _side2BgR; }
            set
            {
                if (_side2BgR != value)
                {
                    _side2BgR = value;
                    OnPropertyChanged("Side2BgR");
                }
            }
        }
        private Nullable<int> _side2BgR;
    
        [DataMember]
        public Nullable<int> Side2BgG
        {
            get { return _side2BgG; }
            set
            {
                if (_side2BgG != value)
                {
                    _side2BgG = value;
                    OnPropertyChanged("Side2BgG");
                }
            }
        }
        private Nullable<int> _side2BgG;
    
        [DataMember]
        public Nullable<int> Side2BgB
        {
            get { return _side2BgB; }
            set
            {
                if (_side2BgB != value)
                {
                    _side2BgB = value;
                    OnPropertyChanged("Side2BgB");
                }
            }
        }
        private Nullable<int> _side2BgB;
    
        [DataMember]
        public Nullable<double> CuttingMargin
        {
            get { return _cuttingMargin; }
            set
            {
                if (_cuttingMargin != value)
                {
                    _cuttingMargin = value;
                    OnPropertyChanged("CuttingMargin");
                }
            }
        }
        private Nullable<double> _cuttingMargin;
    
        [DataMember]
        public Nullable<bool> IsMultiPage
        {
            get { return _isMultiPage; }
            set
            {
                if (_isMultiPage != value)
                {
                    _isMultiPage = value;
                    OnPropertyChanged("IsMultiPage");
                }
            }
        }
        private Nullable<bool> _isMultiPage;
    
        [DataMember]
        public Nullable<int> TotelPage
        {
            get { return _totelPage; }
            set
            {
                if (_totelPage != value)
                {
                    _totelPage = value;
                    OnPropertyChanged("TotelPage");
                }
            }
        }
        private Nullable<int> _totelPage;
    
        [DataMember]
        public Nullable<int> Orientation
        {
            get { return _orientation; }
            set
            {
                if (_orientation != value)
                {
                    _orientation = value;
                    OnPropertyChanged("Orientation");
                }
            }
        }
        private Nullable<int> _orientation;
    
        [DataMember]
        public Nullable<int> MinimumPages
        {
            get { return _minimumPages; }
            set
            {
                if (_minimumPages != value)
                {
                    _minimumPages = value;
                    OnPropertyChanged("MinimumPages");
                }
            }
        }
        private Nullable<int> _minimumPages;
    
        [DataMember]
        public Nullable<bool> IsNotUseDesigner
        {
            get { return _isNotUseDesigner; }
            set
            {
                if (_isNotUseDesigner != value)
                {
                    _isNotUseDesigner = value;
                    OnPropertyChanged("IsNotUseDesigner");
                }
            }
        }
        private Nullable<bool> _isNotUseDesigner;
    
        [DataMember]
        public Nullable<bool> IsRequiredArtwork
        {
            get { return _isRequiredArtwork; }
            set
            {
                if (_isRequiredArtwork != value)
                {
                    _isRequiredArtwork = value;
                    OnPropertyChanged("IsRequiredArtwork");
                }
            }
        }
        private Nullable<bool> _isRequiredArtwork;
    
        [DataMember]
        public Nullable<double> ArtworkMaxWidth
        {
            get { return _artworkMaxWidth; }
            set
            {
                if (_artworkMaxWidth != value)
                {
                    _artworkMaxWidth = value;
                    OnPropertyChanged("ArtworkMaxWidth");
                }
            }
        }
        private Nullable<double> _artworkMaxWidth;
    
        [DataMember]
        public Nullable<double> ArtworkMaxHeight
        {
            get { return _artworkMaxHeight; }
            set
            {
                if (_artworkMaxHeight != value)
                {
                    _artworkMaxHeight = value;
                    OnPropertyChanged("ArtworkMaxHeight");
                }
            }
        }
        private Nullable<double> _artworkMaxHeight;
    
        [DataMember]
        public Nullable<double> ArtworkMaxSize
        {
            get { return _artworkMaxSize; }
            set
            {
                if (_artworkMaxSize != value)
                {
                    _artworkMaxSize = value;
                    OnPropertyChanged("ArtworkMaxSize");
                }
            }
        }
        private Nullable<double> _artworkMaxSize;
    
        [DataMember]
        public string MatchingSetTheme
        {
            get { return _matchingSetTheme; }
            set
            {
                if (_matchingSetTheme != value)
                {
                    _matchingSetTheme = value;
                    OnPropertyChanged("MatchingSetTheme");
                }
            }
        }
        private string _matchingSetTheme;
    
        [DataMember]
        public Nullable<int> BaseColorID
        {
            get { return _baseColorID; }
            set
            {
                if (_baseColorID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaseColorID", _baseColorID);
                    if (!IsDeserializing)
                    {
                        if (BaseColors != null && BaseColors.BaseColorID != value)
                        {
                            BaseColors = null;
                        }
                    }
                    _baseColorID = value;
                    OnPropertyChanged("BaseColorID");
                }
            }
        }
        private Nullable<int> _baseColorID;
    
        [DataMember]
        public Nullable<int> SubmittedBy
        {
            get { return _submittedBy; }
            set
            {
                if (_submittedBy != value)
                {
                    _submittedBy = value;
                    OnPropertyChanged("SubmittedBy");
                }
            }
        }
        private Nullable<int> _submittedBy;
    
        [DataMember]
        public string SubmittedByName
        {
            get { return _submittedByName; }
            set
            {
                if (_submittedByName != value)
                {
                    _submittedByName = value;
                    OnPropertyChanged("SubmittedByName");
                }
            }
        }
        private string _submittedByName;
    
        [DataMember]
        public Nullable<System.DateTime> SubmitDate
        {
            get { return _submitDate; }
            set
            {
                if (_submitDate != value)
                {
                    _submitDate = value;
                    OnPropertyChanged("SubmitDate");
                }
            }
        }
        private Nullable<System.DateTime> _submitDate;
    
        [DataMember]
        public Nullable<int> Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private Nullable<int> _status;
    
        [DataMember]
        public Nullable<int> ApprovedBy
        {
            get { return _approvedBy; }
            set
            {
                if (_approvedBy != value)
                {
                    _approvedBy = value;
                    OnPropertyChanged("ApprovedBy");
                }
            }
        }
        private Nullable<int> _approvedBy;
    
        [DataMember]
        public string ApprovedByName
        {
            get { return _approvedByName; }
            set
            {
                if (_approvedByName != value)
                {
                    _approvedByName = value;
                    OnPropertyChanged("ApprovedByName");
                }
            }
        }
        private string _approvedByName;
    
        [DataMember]
        public Nullable<int> UserRating
        {
            get { return _userRating; }
            set
            {
                if (_userRating != value)
                {
                    _userRating = value;
                    OnPropertyChanged("UserRating");
                }
            }
        }
        private Nullable<int> _userRating;
    
        [DataMember]
        public Nullable<int> UsedCount
        {
            get { return _usedCount; }
            set
            {
                if (_usedCount != value)
                {
                    _usedCount = value;
                    OnPropertyChanged("UsedCount");
                }
            }
        }
        private Nullable<int> _usedCount;
    
        [DataMember]
        public Nullable<int> MPCRating
        {
            get { return _mPCRating; }
            set
            {
                if (_mPCRating != value)
                {
                    _mPCRating = value;
                    OnPropertyChanged("MPCRating");
                }
            }
        }
        private Nullable<int> _mPCRating;
    
        [DataMember]
        public string RejectionReason
        {
            get { return _rejectionReason; }
            set
            {
                if (_rejectionReason != value)
                {
                    _rejectionReason = value;
                    OnPropertyChanged("RejectionReason");
                }
            }
        }
        private string _rejectionReason;
    
        [DataMember]
        public Nullable<System.DateTime> ApprovalDate
        {
            get { return _approvalDate; }
            set
            {
                if (_approvalDate != value)
                {
                    _approvalDate = value;
                    OnPropertyChanged("ApprovalDate");
                }
            }
        }
        private Nullable<System.DateTime> _approvalDate;
    
        [DataMember]
        public string TempString
        {
            get { return _tempString; }
            set
            {
                if (_tempString != value)
                {
                    _tempString = value;
                    OnPropertyChanged("TempString");
                }
            }
        }
        private string _tempString;
    
        [DataMember]
        public Nullable<int> MatchingSetID
        {
            get { return _matchingSetID; }
            set
            {
                if (_matchingSetID != value)
                {
                    ChangeTracker.RecordOriginalValue("MatchingSetID", _matchingSetID);
                    if (!IsDeserializing)
                    {
                        if (MatchingSets != null && MatchingSets.MatchingSetID != value)
                        {
                            MatchingSets = null;
                        }
                    }
                    _matchingSetID = value;
                    OnPropertyChanged("MatchingSetID");
                }
            }
        }
        private Nullable<int> _matchingSetID;
    
        [DataMember]
        public string SLThumbnail
        {
            get { return _sLThumbnail; }
            set
            {
                if (_sLThumbnail != value)
                {
                    _sLThumbnail = value;
                    OnPropertyChanged("SLThumbnail");
                }
            }
        }
        private string _sLThumbnail;
    
        [DataMember]
        public string FullView
        {
            get { return _fullView; }
            set
            {
                if (_fullView != value)
                {
                    _fullView = value;
                    OnPropertyChanged("FullView");
                }
            }
        }
        private string _fullView;
    
        [DataMember]
        public string SuperView
        {
            get { return _superView; }
            set
            {
                if (_superView != value)
                {
                    _superView = value;
                    OnPropertyChanged("SuperView");
                }
            }
        }
        private string _superView;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public BaseColors BaseColors
        {
            get { return _baseColors; }
            set
            {
                if (!ReferenceEquals(_baseColors, value))
                {
                    var previousValue = _baseColors;
                    _baseColors = value;
                    FixupBaseColors(previousValue);
                    OnNavigationPropertyChanged("BaseColors");
                }
            }
        }
        private BaseColors _baseColors;
    
        [DataMember]
        public MatchingSets MatchingSets
        {
            get { return _matchingSets; }
            set
            {
                if (!ReferenceEquals(_matchingSets, value))
                {
                    var previousValue = _matchingSets;
                    _matchingSets = value;
                    FixupMatchingSets(previousValue);
                    OnNavigationPropertyChanged("MatchingSets");
                }
            }
        }
        private MatchingSets _matchingSets;
    
        [DataMember]
        public tbl_ProductCategory tbl_ProductCategory
        {
            get { return _tbl_ProductCategory; }
            set
            {
                if (!ReferenceEquals(_tbl_ProductCategory, value))
                {
                    var previousValue = _tbl_ProductCategory;
                    _tbl_ProductCategory = value;
                    Fixuptbl_ProductCategory(previousValue);
                    OnNavigationPropertyChanged("tbl_ProductCategory");
                }
            }
        }
        private tbl_ProductCategory _tbl_ProductCategory;
    
        [DataMember]
        public TrackableCollection<TemplateBackgroundImages> TemplateBackgroundImages
        {
            get
            {
                if (_templateBackgroundImages == null)
                {
                    _templateBackgroundImages = new TrackableCollection<TemplateBackgroundImages>();
                    _templateBackgroundImages.CollectionChanged += FixupTemplateBackgroundImages;
                }
                return _templateBackgroundImages;
            }
            set
            {
                if (!ReferenceEquals(_templateBackgroundImages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateBackgroundImages != null)
                    {
                        _templateBackgroundImages.CollectionChanged -= FixupTemplateBackgroundImages;
                    }
                    _templateBackgroundImages = value;
                    if (_templateBackgroundImages != null)
                    {
                        _templateBackgroundImages.CollectionChanged += FixupTemplateBackgroundImages;
                    }
                    OnNavigationPropertyChanged("TemplateBackgroundImages");
                }
            }
        }
        private TrackableCollection<TemplateBackgroundImages> _templateBackgroundImages;
    
        [DataMember]
        public TrackableCollection<TemplateColorStyles> TemplateColorStyles
        {
            get
            {
                if (_templateColorStyles == null)
                {
                    _templateColorStyles = new TrackableCollection<TemplateColorStyles>();
                    _templateColorStyles.CollectionChanged += FixupTemplateColorStyles;
                }
                return _templateColorStyles;
            }
            set
            {
                if (!ReferenceEquals(_templateColorStyles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateColorStyles != null)
                    {
                        _templateColorStyles.CollectionChanged -= FixupTemplateColorStyles;
                    }
                    _templateColorStyles = value;
                    if (_templateColorStyles != null)
                    {
                        _templateColorStyles.CollectionChanged += FixupTemplateColorStyles;
                    }
                    OnNavigationPropertyChanged("TemplateColorStyles");
                }
            }
        }
        private TrackableCollection<TemplateColorStyles> _templateColorStyles;
    
        [DataMember]
        public TrackableCollection<TemplateFonts> TemplateFonts
        {
            get
            {
                if (_templateFonts == null)
                {
                    _templateFonts = new TrackableCollection<TemplateFonts>();
                    _templateFonts.CollectionChanged += FixupTemplateFonts;
                }
                return _templateFonts;
            }
            set
            {
                if (!ReferenceEquals(_templateFonts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateFonts != null)
                    {
                        _templateFonts.CollectionChanged -= FixupTemplateFonts;
                    }
                    _templateFonts = value;
                    if (_templateFonts != null)
                    {
                        _templateFonts.CollectionChanged += FixupTemplateFonts;
                    }
                    OnNavigationPropertyChanged("TemplateFonts");
                }
            }
        }
        private TrackableCollection<TemplateFonts> _templateFonts;
    
        [DataMember]
        public TrackableCollection<TemplateFontStyles> TemplateFontStyles
        {
            get
            {
                if (_templateFontStyles == null)
                {
                    _templateFontStyles = new TrackableCollection<TemplateFontStyles>();
                    _templateFontStyles.CollectionChanged += FixupTemplateFontStyles;
                }
                return _templateFontStyles;
            }
            set
            {
                if (!ReferenceEquals(_templateFontStyles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateFontStyles != null)
                    {
                        _templateFontStyles.CollectionChanged -= FixupTemplateFontStyles;
                    }
                    _templateFontStyles = value;
                    if (_templateFontStyles != null)
                    {
                        _templateFontStyles.CollectionChanged += FixupTemplateFontStyles;
                    }
                    OnNavigationPropertyChanged("TemplateFontStyles");
                }
            }
        }
        private TrackableCollection<TemplateFontStyles> _templateFontStyles;
    
        [DataMember]
        public TrackableCollection<TemplateIndustryTags> TemplateIndustryTags
        {
            get
            {
                if (_templateIndustryTags == null)
                {
                    _templateIndustryTags = new TrackableCollection<TemplateIndustryTags>();
                    _templateIndustryTags.CollectionChanged += FixupTemplateIndustryTags;
                }
                return _templateIndustryTags;
            }
            set
            {
                if (!ReferenceEquals(_templateIndustryTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateIndustryTags != null)
                    {
                        _templateIndustryTags.CollectionChanged -= FixupTemplateIndustryTags;
                    }
                    _templateIndustryTags = value;
                    if (_templateIndustryTags != null)
                    {
                        _templateIndustryTags.CollectionChanged += FixupTemplateIndustryTags;
                    }
                    OnNavigationPropertyChanged("TemplateIndustryTags");
                }
            }
        }
        private TrackableCollection<TemplateIndustryTags> _templateIndustryTags;
    
        [DataMember]
        public TrackableCollection<TemplateKeywords> TemplateKeywords
        {
            get
            {
                if (_templateKeywords == null)
                {
                    _templateKeywords = new TrackableCollection<TemplateKeywords>();
                    _templateKeywords.CollectionChanged += FixupTemplateKeywords;
                }
                return _templateKeywords;
            }
            set
            {
                if (!ReferenceEquals(_templateKeywords, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateKeywords != null)
                    {
                        _templateKeywords.CollectionChanged -= FixupTemplateKeywords;
                    }
                    _templateKeywords = value;
                    if (_templateKeywords != null)
                    {
                        _templateKeywords.CollectionChanged += FixupTemplateKeywords;
                    }
                    OnNavigationPropertyChanged("TemplateKeywords");
                }
            }
        }
        private TrackableCollection<TemplateKeywords> _templateKeywords;
    
        [DataMember]
        public TrackableCollection<TemplateObjects> TemplateObjects
        {
            get
            {
                if (_templateObjects == null)
                {
                    _templateObjects = new TrackableCollection<TemplateObjects>();
                    _templateObjects.CollectionChanged += FixupTemplateObjects;
                }
                return _templateObjects;
            }
            set
            {
                if (!ReferenceEquals(_templateObjects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateObjects != null)
                    {
                        _templateObjects.CollectionChanged -= FixupTemplateObjects;
                    }
                    _templateObjects = value;
                    if (_templateObjects != null)
                    {
                        _templateObjects.CollectionChanged += FixupTemplateObjects;
                    }
                    OnNavigationPropertyChanged("TemplateObjects");
                }
            }
        }
        private TrackableCollection<TemplateObjects> _templateObjects;
    
        [DataMember]
        public TrackableCollection<TemplateThemeTags> TemplateThemeTags
        {
            get
            {
                if (_templateThemeTags == null)
                {
                    _templateThemeTags = new TrackableCollection<TemplateThemeTags>();
                    _templateThemeTags.CollectionChanged += FixupTemplateThemeTags;
                }
                return _templateThemeTags;
            }
            set
            {
                if (!ReferenceEquals(_templateThemeTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateThemeTags != null)
                    {
                        _templateThemeTags.CollectionChanged -= FixupTemplateThemeTags;
                    }
                    _templateThemeTags = value;
                    if (_templateThemeTags != null)
                    {
                        _templateThemeTags.CollectionChanged += FixupTemplateThemeTags;
                    }
                    OnNavigationPropertyChanged("TemplateThemeTags");
                }
            }
        }
        private TrackableCollection<TemplateThemeTags> _templateThemeTags;
    
        [DataMember]
        public TrackableCollection<TemplateSide2Templates> TemplateSide2Templates
        {
            get
            {
                if (_templateSide2Templates == null)
                {
                    _templateSide2Templates = new TrackableCollection<TemplateSide2Templates>();
                    _templateSide2Templates.CollectionChanged += FixupTemplateSide2Templates;
                }
                return _templateSide2Templates;
            }
            set
            {
                if (!ReferenceEquals(_templateSide2Templates, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateSide2Templates != null)
                    {
                        _templateSide2Templates.CollectionChanged -= FixupTemplateSide2Templates;
                    }
                    _templateSide2Templates = value;
                    if (_templateSide2Templates != null)
                    {
                        _templateSide2Templates.CollectionChanged += FixupTemplateSide2Templates;
                    }
                    OnNavigationPropertyChanged("TemplateSide2Templates");
                }
            }
        }
        private TrackableCollection<TemplateSide2Templates> _templateSide2Templates;
    
        [DataMember]
        public TrackableCollection<TemplateSide2Templates> TemplateSide2Templates1
        {
            get
            {
                if (_templateSide2Templates1 == null)
                {
                    _templateSide2Templates1 = new TrackableCollection<TemplateSide2Templates>();
                    _templateSide2Templates1.CollectionChanged += FixupTemplateSide2Templates1;
                }
                return _templateSide2Templates1;
            }
            set
            {
                if (!ReferenceEquals(_templateSide2Templates1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templateSide2Templates1 != null)
                    {
                        _templateSide2Templates1.CollectionChanged -= FixupTemplateSide2Templates1;
                    }
                    _templateSide2Templates1 = value;
                    if (_templateSide2Templates1 != null)
                    {
                        _templateSide2Templates1.CollectionChanged += FixupTemplateSide2Templates1;
                    }
                    OnNavigationPropertyChanged("TemplateSide2Templates1");
                }
            }
        }
        private TrackableCollection<TemplateSide2Templates> _templateSide2Templates1;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BaseColors = null;
            MatchingSets = null;
            tbl_ProductCategory = null;
            TemplateBackgroundImages.Clear();
            TemplateColorStyles.Clear();
            TemplateFonts.Clear();
            TemplateFontStyles.Clear();
            TemplateIndustryTags.Clear();
            TemplateKeywords.Clear();
            TemplateObjects.Clear();
            TemplateThemeTags.Clear();
            TemplateSide2Templates.Clear();
            TemplateSide2Templates1.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupBaseColors(BaseColors previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Templates.Contains(this))
            {
                previousValue.Templates.Remove(this);
            }
    
            if (BaseColors != null)
            {
                if (!BaseColors.Templates.Contains(this))
                {
                    BaseColors.Templates.Add(this);
                }
    
                BaseColorID = BaseColors.BaseColorID;
            }
            else if (!skipKeys)
            {
                BaseColorID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaseColors")
                    && (ChangeTracker.OriginalValues["BaseColors"] == BaseColors))
                {
                    ChangeTracker.OriginalValues.Remove("BaseColors");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaseColors", previousValue);
                }
                if (BaseColors != null && !BaseColors.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaseColors.StartTracking();
                }
            }
        }
    
        private void FixupMatchingSets(MatchingSets previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Templates.Contains(this))
            {
                previousValue.Templates.Remove(this);
            }
    
            if (MatchingSets != null)
            {
                if (!MatchingSets.Templates.Contains(this))
                {
                    MatchingSets.Templates.Add(this);
                }
    
                MatchingSetID = MatchingSets.MatchingSetID;
            }
            else if (!skipKeys)
            {
                MatchingSetID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MatchingSets")
                    && (ChangeTracker.OriginalValues["MatchingSets"] == MatchingSets))
                {
                    ChangeTracker.OriginalValues.Remove("MatchingSets");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MatchingSets", previousValue);
                }
                if (MatchingSets != null && !MatchingSets.ChangeTracker.ChangeTrackingEnabled)
                {
                    MatchingSets.StartTracking();
                }
            }
        }
    
        private void Fixuptbl_ProductCategory(tbl_ProductCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Templates.Contains(this))
            {
                previousValue.Templates.Remove(this);
            }
    
            if (tbl_ProductCategory != null)
            {
                if (!tbl_ProductCategory.Templates.Contains(this))
                {
                    tbl_ProductCategory.Templates.Add(this);
                }
    
                ProductCategoryID = tbl_ProductCategory.ProductCategoryID;
            }
            else if (!skipKeys)
            {
                ProductCategoryID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("tbl_ProductCategory")
                    && (ChangeTracker.OriginalValues["tbl_ProductCategory"] == tbl_ProductCategory))
                {
                    ChangeTracker.OriginalValues.Remove("tbl_ProductCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("tbl_ProductCategory", previousValue);
                }
                if (tbl_ProductCategory != null && !tbl_ProductCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    tbl_ProductCategory.StartTracking();
                }
            }
        }
    
        private void FixupTemplateBackgroundImages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateBackgroundImages item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateBackgroundImages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateBackgroundImages item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateBackgroundImages", item);
                    }
                }
            }
        }
    
        private void FixupTemplateColorStyles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateColorStyles item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateColorStyles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateColorStyles item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateColorStyles", item);
                    }
                }
            }
        }
    
        private void FixupTemplateFonts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateFonts item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateFonts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateFonts item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateFonts", item);
                    }
                }
            }
        }
    
        private void FixupTemplateFontStyles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateFontStyles item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateFontStyles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateFontStyles item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateFontStyles", item);
                    }
                }
            }
        }
    
        private void FixupTemplateIndustryTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateIndustryTags item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateIndustryTags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateIndustryTags item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateIndustryTags", item);
                    }
                }
            }
        }
    
        private void FixupTemplateKeywords(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateKeywords item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateKeywords", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateKeywords item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateKeywords", item);
                    }
                }
            }
        }
    
        private void FixupTemplateObjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateObjects item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateObjects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateObjects item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateObjects", item);
                    }
                }
            }
        }
    
        private void FixupTemplateThemeTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateThemeTags item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateThemeTags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateThemeTags item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateThemeTags", item);
                    }
                }
            }
        }
    
        private void FixupTemplateSide2Templates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateSide2Templates item in e.NewItems)
                {
                    item.Templates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateSide2Templates", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateSide2Templates item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates, this))
                    {
                        item.Templates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateSide2Templates", item);
                    }
                }
            }
        }
    
        private void FixupTemplateSide2Templates1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateSide2Templates item in e.NewItems)
                {
                    item.Templates1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TemplateSide2Templates1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateSide2Templates item in e.OldItems)
                {
                    if (ReferenceEquals(item.Templates1, this))
                    {
                        item.Templates1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TemplateSide2Templates1", item);
                    }
                }
            }
        }

        #endregion
    }
}
