//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace TemplateDesignerModelTypes
{
    public partial class TemplateDesignerEntities : ObjectContext
    {
        public const string ConnectionString = "name=TemplateDesignerEntities";
        public const string ContainerName = "TemplateDesignerEntities";
    
        #region Constructors
    
        public TemplateDesignerEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public TemplateDesignerEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public TemplateDesignerEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<BaseColors> BaseColors
        {
            get { return _baseColors  ?? (_baseColors = CreateObjectSet<BaseColors>("BaseColors")); }
        }
        private ObjectSet<BaseColors> _baseColors;
    
        public ObjectSet<sysdiagrams> sysdiagrams
        {
            get { return _sysdiagrams  ?? (_sysdiagrams = CreateObjectSet<sysdiagrams>("sysdiagrams")); }
        }
        private ObjectSet<sysdiagrams> _sysdiagrams;
    
        public ObjectSet<Tags> Tags
        {
            get { return _tags  ?? (_tags = CreateObjectSet<Tags>("Tags")); }
        }
        private ObjectSet<Tags> _tags;
    
        public ObjectSet<tbl_ProductCategoryFoldLines> tbl_ProductCategoryFoldLines
        {
            get { return _tbl_ProductCategoryFoldLines  ?? (_tbl_ProductCategoryFoldLines = CreateObjectSet<tbl_ProductCategoryFoldLines>("tbl_ProductCategoryFoldLines")); }
        }
        private ObjectSet<tbl_ProductCategoryFoldLines> _tbl_ProductCategoryFoldLines;
    
        public ObjectSet<TemplateBackgroundImages> TemplateBackgroundImages
        {
            get { return _templateBackgroundImages  ?? (_templateBackgroundImages = CreateObjectSet<TemplateBackgroundImages>("TemplateBackgroundImages")); }
        }
        private ObjectSet<TemplateBackgroundImages> _templateBackgroundImages;
    
        public ObjectSet<TemplateColorStyles> TemplateColorStyles
        {
            get { return _templateColorStyles  ?? (_templateColorStyles = CreateObjectSet<TemplateColorStyles>("TemplateColorStyles")); }
        }
        private ObjectSet<TemplateColorStyles> _templateColorStyles;
    
        public ObjectSet<TemplateFonts> TemplateFonts
        {
            get { return _templateFonts  ?? (_templateFonts = CreateObjectSet<TemplateFonts>("TemplateFonts")); }
        }
        private ObjectSet<TemplateFonts> _templateFonts;
    
        public ObjectSet<TemplateFontStyles> TemplateFontStyles
        {
            get { return _templateFontStyles  ?? (_templateFontStyles = CreateObjectSet<TemplateFontStyles>("TemplateFontStyles")); }
        }
        private ObjectSet<TemplateFontStyles> _templateFontStyles;
    
        public ObjectSet<TemplateIndustryTags> TemplateIndustryTags
        {
            get { return _templateIndustryTags  ?? (_templateIndustryTags = CreateObjectSet<TemplateIndustryTags>("TemplateIndustryTags")); }
        }
        private ObjectSet<TemplateIndustryTags> _templateIndustryTags;
    
        public ObjectSet<TemplateKeywords> TemplateKeywords
        {
            get { return _templateKeywords  ?? (_templateKeywords = CreateObjectSet<TemplateKeywords>("TemplateKeywords")); }
        }
        private ObjectSet<TemplateKeywords> _templateKeywords;
    
        public ObjectSet<TemplateObjects> TemplateObjects
        {
            get { return _templateObjects  ?? (_templateObjects = CreateObjectSet<TemplateObjects>("TemplateObjects")); }
        }
        private ObjectSet<TemplateObjects> _templateObjects;
    
        public ObjectSet<TemplatePages> TemplatePages
        {
            get { return _templatePages  ?? (_templatePages = CreateObjectSet<TemplatePages>("TemplatePages")); }
        }
        private ObjectSet<TemplatePages> _templatePages;
    
        public ObjectSet<TemplatePagesName> TemplatePagesName
        {
            get { return _templatePagesName  ?? (_templatePagesName = CreateObjectSet<TemplatePagesName>("TemplatePagesName")); }
        }
        private ObjectSet<TemplatePagesName> _templatePagesName;
    
        public ObjectSet<TemplateSide2Templates> TemplateSide2Templates
        {
            get { return _templateSide2Templates  ?? (_templateSide2Templates = CreateObjectSet<TemplateSide2Templates>("TemplateSide2Templates")); }
        }
        private ObjectSet<TemplateSide2Templates> _templateSide2Templates;
    
        public ObjectSet<TemplateThemeTags> TemplateThemeTags
        {
            get { return _templateThemeTags  ?? (_templateThemeTags = CreateObjectSet<TemplateThemeTags>("TemplateThemeTags")); }
        }
        private ObjectSet<TemplateThemeTags> _templateThemeTags;
    
        public ObjectSet<vw_ProductCategoriesLeafNodes> vw_ProductCategoriesLeafNodes
        {
            get { return _vw_ProductCategoriesLeafNodes  ?? (_vw_ProductCategoriesLeafNodes = CreateObjectSet<vw_ProductCategoriesLeafNodes>("vw_ProductCategoriesLeafNodes")); }
        }
        private ObjectSet<vw_ProductCategoriesLeafNodes> _vw_ProductCategoriesLeafNodes;
    
        public ObjectSet<tbl_ProductCategory> tbl_ProductCategory
        {
            get { return _tbl_ProductCategory  ?? (_tbl_ProductCategory = CreateObjectSet<tbl_ProductCategory>("tbl_ProductCategory")); }
        }
        private ObjectSet<tbl_ProductCategory> _tbl_ProductCategory;
    
        public ObjectSet<MatchingSetCategories> MatchingSetCategories
        {
            get { return _matchingSetCategories  ?? (_matchingSetCategories = CreateObjectSet<MatchingSetCategories>("MatchingSetCategories")); }
        }
        private ObjectSet<MatchingSetCategories> _matchingSetCategories;
    
        public ObjectSet<MatchingSets> MatchingSets
        {
            get { return _matchingSets  ?? (_matchingSets = CreateObjectSet<MatchingSets>("MatchingSets")); }
        }
        private ObjectSet<MatchingSets> _matchingSets;
    
        public ObjectSet<Templates> Templates
        {
            get { return _templates  ?? (_templates = CreateObjectSet<Templates>("Templates")); }
        }
        private ObjectSet<Templates> _templates;
    
        public ObjectSet<vw_getChildCategoriesWithTemplates> vw_getChildCategoriesWithTemplates
        {
            get { return _vw_getChildCategoriesWithTemplates  ?? (_vw_getChildCategoriesWithTemplates = CreateObjectSet<vw_getChildCategoriesWithTemplates>("vw_getChildCategoriesWithTemplates")); }
        }
        private ObjectSet<vw_getChildCategoriesWithTemplates> _vw_getChildCategoriesWithTemplates;

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="templateID">No Metadata Documentation available.</param>
        public virtual ObjectResult<sp_GetTemplateIndustryTags_Result> sp_GetTemplateIndustryTags(Nullable<int> templateID)
        {
    
            ObjectParameter templateIDParameter;
    
            if (templateID.HasValue)
            {
                templateIDParameter = new ObjectParameter("TemplateID", templateID);
            }
            else
            {
                templateIDParameter = new ObjectParameter("TemplateID", typeof(int));
            }
            return base.ExecuteFunction<sp_GetTemplateIndustryTags_Result>("sp_GetTemplateIndustryTags", templateIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="templateID">No Metadata Documentation available.</param>
        public virtual ObjectResult<sp_GetTemplateThemeTags_Result> sp_GetTemplateThemeTags(Nullable<int> templateID)
        {
    
            ObjectParameter templateIDParameter;
    
            if (templateID.HasValue)
            {
                templateIDParameter = new ObjectParameter("TemplateID", templateID);
            }
            else
            {
                templateIDParameter = new ObjectParameter("TemplateID", typeof(int));
            }
            return base.ExecuteFunction<sp_GetTemplateThemeTags_Result>("sp_GetTemplateThemeTags", templateIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="templateID">No Metadata Documentation available.</param>
        /// <param name="submittedBy">No Metadata Documentation available.</param>
        /// <param name="submittedByName">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> sp_cloneTemplate(Nullable<int> templateID, Nullable<int> submittedBy, string submittedByName)
        {
    
            ObjectParameter templateIDParameter;
    
            if (templateID.HasValue)
            {
                templateIDParameter = new ObjectParameter("TemplateID", templateID);
            }
            else
            {
                templateIDParameter = new ObjectParameter("TemplateID", typeof(int));
            }
    
            ObjectParameter submittedByParameter;
    
            if (submittedBy.HasValue)
            {
                submittedByParameter = new ObjectParameter("submittedBy", submittedBy);
            }
            else
            {
                submittedByParameter = new ObjectParameter("submittedBy", typeof(int));
            }
    
            ObjectParameter submittedByNameParameter;
    
            if (submittedByName != null)
            {
                submittedByNameParameter = new ObjectParameter("submittedByName", submittedByName);
            }
            else
            {
                submittedByNameParameter = new ObjectParameter("submittedByName", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("sp_cloneTemplate", templateIDParameter, submittedByParameter, submittedByNameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="status">No Metadata Documentation available.</param>
        /// <param name="matchingSetID">No Metadata Documentation available.</param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="pagesize">No Metadata Documentation available.</param>
        /// <param name="pageNumber">No Metadata Documentation available.</param>
        /// <param name="totalRows">No Metadata Documentation available.</param>
        /// <param name="role">No Metadata Documentation available.</param>
        /// <param name="userID">No Metadata Documentation available.</param>
        public virtual ObjectResult<sp_GetMatchingSetTemplateView_Result> sp_GetMatchingSetTemplateView(Nullable<int> status, Nullable<int> matchingSetID, string keywords, Nullable<int> pagesize, Nullable<int> pageNumber, ObjectParameter totalRows, string role, Nullable<int> userID)
        {
    
            ObjectParameter statusParameter;
    
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("status", typeof(int));
            }
    
            ObjectParameter matchingSetIDParameter;
    
            if (matchingSetID.HasValue)
            {
                matchingSetIDParameter = new ObjectParameter("MatchingSetID", matchingSetID);
            }
            else
            {
                matchingSetIDParameter = new ObjectParameter("MatchingSetID", typeof(int));
            }
    
            ObjectParameter keywordsParameter;
    
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(string));
            }
    
            ObjectParameter pagesizeParameter;
    
            if (pagesize.HasValue)
            {
                pagesizeParameter = new ObjectParameter("Pagesize", pagesize);
            }
            else
            {
                pagesizeParameter = new ObjectParameter("Pagesize", typeof(int));
            }
    
            ObjectParameter pageNumberParameter;
    
            if (pageNumber.HasValue)
            {
                pageNumberParameter = new ObjectParameter("PageNumber", pageNumber);
            }
            else
            {
                pageNumberParameter = new ObjectParameter("PageNumber", typeof(int));
            }
    
            ObjectParameter roleParameter;
    
            if (role != null)
            {
                roleParameter = new ObjectParameter("role", role);
            }
            else
            {
                roleParameter = new ObjectParameter("role", typeof(string));
            }
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<sp_GetMatchingSetTemplateView_Result>("sp_GetMatchingSetTemplateView", statusParameter, matchingSetIDParameter, keywordsParameter, pagesizeParameter, pageNumberParameter, totalRows, roleParameter, userIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="matchingSetID">No Metadata Documentation available.</param>
        /// <param name="productName">No Metadata Documentation available.</param>
        public virtual ObjectResult<sp_GetMatchingSetTemplatesList_Result> sp_GetMatchingSetTemplatesList(Nullable<int> matchingSetID, string productName)
        {
    
            ObjectParameter matchingSetIDParameter;
    
            if (matchingSetID.HasValue)
            {
                matchingSetIDParameter = new ObjectParameter("MatchingSetID", matchingSetID);
            }
            else
            {
                matchingSetIDParameter = new ObjectParameter("MatchingSetID", typeof(int));
            }
    
            ObjectParameter productNameParameter;
    
            if (productName != null)
            {
                productNameParameter = new ObjectParameter("ProductName", productName);
            }
            else
            {
                productNameParameter = new ObjectParameter("ProductName", typeof(string));
            }
            return base.ExecuteFunction<sp_GetMatchingSetTemplatesList_Result>("sp_GetMatchingSetTemplatesList", matchingSetIDParameter, productNameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="productID">No Metadata Documentation available.</param>
        public virtual ObjectResult<TemplateFonts> sp_GetUsedFonts(Nullable<int> productID)
        {
    
            ObjectParameter productIDParameter;
    
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("productID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("productID", typeof(int));
            }
            return base.ExecuteFunction<TemplateFonts>("sp_GetUsedFonts", productIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="productID">No Metadata Documentation available.</param>
        public ObjectResult<TemplateFonts> sp_GetUsedFonts(Nullable<int> productID, MergeOption mergeOption)
        {
            ObjectParameter productIDParameter;
            if (productID.HasValue)
            {
                productIDParameter = new ObjectParameter("productID", productID);
            }
            else
            {
                productIDParameter = new ObjectParameter("productID", typeof(int));
            }
    
            return base.ExecuteFunction<TemplateFonts>("sp_GetUsedFonts", mergeOption, productIDParameter);
        }

        #endregion
    }
}
