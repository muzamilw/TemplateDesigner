//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TemplateDesignerModelTypes
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(tbl_ProductCategory))]
    [KnownType(typeof(tbl_ProductCategoryFoldLines))]
    [KnownType(typeof(MatchingSetCategories))]
    [KnownType(typeof(Templates))]
    public partial class tbl_ProductCategory: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductCategoryID
        {
            get { return _productCategoryID; }
            set
            {
                if (_productCategoryID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductCategoryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _productCategoryID = value;
                    OnPropertyChanged("ProductCategoryID");
                }
            }
        }
        private int _productCategoryID;
    
        [DataMember]
        public string CategoryName
        {
            get { return _categoryName; }
            set
            {
                if (_categoryName != value)
                {
                    _categoryName = value;
                    OnPropertyChanged("CategoryName");
                }
            }
        }
        private string _categoryName;
    
        [DataMember]
        public string ContentType
        {
            get { return _contentType; }
            set
            {
                if (_contentType != value)
                {
                    _contentType = value;
                    OnPropertyChanged("ContentType");
                }
            }
        }
        private string _contentType;
    
        [DataMember]
        public string Description1
        {
            get { return _description1; }
            set
            {
                if (_description1 != value)
                {
                    _description1 = value;
                    OnPropertyChanged("Description1");
                }
            }
        }
        private string _description1;
    
        [DataMember]
        public string Description2
        {
            get { return _description2; }
            set
            {
                if (_description2 != value)
                {
                    _description2 = value;
                    OnPropertyChanged("Description2");
                }
            }
        }
        private string _description2;
    
        [DataMember]
        public int LockedBy
        {
            get { return _lockedBy; }
            set
            {
                if (_lockedBy != value)
                {
                    _lockedBy = value;
                    OnPropertyChanged("LockedBy");
                }
            }
        }
        private int _lockedBy;
    
        [DataMember]
        public Nullable<int> ParentCategoryID
        {
            get { return _parentCategoryID; }
            set
            {
                if (_parentCategoryID != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentCategoryID", _parentCategoryID);
                    if (!IsDeserializing)
                    {
                        if (tbl_ProductCategory2 != null && tbl_ProductCategory2.ProductCategoryID != value)
                        {
                            tbl_ProductCategory2 = null;
                        }
                    }
                    _parentCategoryID = value;
                    OnPropertyChanged("ParentCategoryID");
                }
            }
        }
        private Nullable<int> _parentCategoryID;
    
        [DataMember]
        public int DisplayOrder
        {
            get { return _displayOrder; }
            set
            {
                if (_displayOrder != value)
                {
                    _displayOrder = value;
                    OnPropertyChanged("DisplayOrder");
                }
            }
        }
        private int _displayOrder;
    
        [DataMember]
        public string ImagePath
        {
            get { return _imagePath; }
            set
            {
                if (_imagePath != value)
                {
                    _imagePath = value;
                    OnPropertyChanged("ImagePath");
                }
            }
        }
        private string _imagePath;
    
        [DataMember]
        public string ThumbnailPath
        {
            get { return _thumbnailPath; }
            set
            {
                if (_thumbnailPath != value)
                {
                    _thumbnailPath = value;
                    OnPropertyChanged("ThumbnailPath");
                }
            }
        }
        private string _thumbnailPath;
    
        [DataMember]
        public Nullable<bool> ApplySizeRestrictions
        {
            get { return _applySizeRestrictions; }
            set
            {
                if (_applySizeRestrictions != value)
                {
                    _applySizeRestrictions = value;
                    OnPropertyChanged("ApplySizeRestrictions");
                }
            }
        }
        private Nullable<bool> _applySizeRestrictions;
    
        [DataMember]
        public Nullable<double> WidthRestriction
        {
            get { return _widthRestriction; }
            set
            {
                if (_widthRestriction != value)
                {
                    _widthRestriction = value;
                    OnPropertyChanged("WidthRestriction");
                }
            }
        }
        private Nullable<double> _widthRestriction;
    
        [DataMember]
        public Nullable<double> HeightRestriction
        {
            get { return _heightRestriction; }
            set
            {
                if (_heightRestriction != value)
                {
                    _heightRestriction = value;
                    OnPropertyChanged("HeightRestriction");
                }
            }
        }
        private Nullable<double> _heightRestriction;
    
        [DataMember]
        public Nullable<bool> ApplyFoldLines
        {
            get { return _applyFoldLines; }
            set
            {
                if (_applyFoldLines != value)
                {
                    _applyFoldLines = value;
                    OnPropertyChanged("ApplyFoldLines");
                }
            }
        }
        private Nullable<bool> _applyFoldLines;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<tbl_ProductCategory> tbl_ProductCategory1
        {
            get
            {
                if (_tbl_ProductCategory1 == null)
                {
                    _tbl_ProductCategory1 = new TrackableCollection<tbl_ProductCategory>();
                    _tbl_ProductCategory1.CollectionChanged += Fixuptbl_ProductCategory1;
                }
                return _tbl_ProductCategory1;
            }
            set
            {
                if (!ReferenceEquals(_tbl_ProductCategory1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tbl_ProductCategory1 != null)
                    {
                        _tbl_ProductCategory1.CollectionChanged -= Fixuptbl_ProductCategory1;
                    }
                    _tbl_ProductCategory1 = value;
                    if (_tbl_ProductCategory1 != null)
                    {
                        _tbl_ProductCategory1.CollectionChanged += Fixuptbl_ProductCategory1;
                    }
                    OnNavigationPropertyChanged("tbl_ProductCategory1");
                }
            }
        }
        private TrackableCollection<tbl_ProductCategory> _tbl_ProductCategory1;
    
        [DataMember]
        public tbl_ProductCategory tbl_ProductCategory2
        {
            get { return _tbl_ProductCategory2; }
            set
            {
                if (!ReferenceEquals(_tbl_ProductCategory2, value))
                {
                    var previousValue = _tbl_ProductCategory2;
                    _tbl_ProductCategory2 = value;
                    Fixuptbl_ProductCategory2(previousValue);
                    OnNavigationPropertyChanged("tbl_ProductCategory2");
                }
            }
        }
        private tbl_ProductCategory _tbl_ProductCategory2;
    
        [DataMember]
        public TrackableCollection<tbl_ProductCategoryFoldLines> tbl_ProductCategoryFoldLines
        {
            get
            {
                if (_tbl_ProductCategoryFoldLines == null)
                {
                    _tbl_ProductCategoryFoldLines = new TrackableCollection<tbl_ProductCategoryFoldLines>();
                    _tbl_ProductCategoryFoldLines.CollectionChanged += Fixuptbl_ProductCategoryFoldLines;
                }
                return _tbl_ProductCategoryFoldLines;
            }
            set
            {
                if (!ReferenceEquals(_tbl_ProductCategoryFoldLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tbl_ProductCategoryFoldLines != null)
                    {
                        _tbl_ProductCategoryFoldLines.CollectionChanged -= Fixuptbl_ProductCategoryFoldLines;
                    }
                    _tbl_ProductCategoryFoldLines = value;
                    if (_tbl_ProductCategoryFoldLines != null)
                    {
                        _tbl_ProductCategoryFoldLines.CollectionChanged += Fixuptbl_ProductCategoryFoldLines;
                    }
                    OnNavigationPropertyChanged("tbl_ProductCategoryFoldLines");
                }
            }
        }
        private TrackableCollection<tbl_ProductCategoryFoldLines> _tbl_ProductCategoryFoldLines;
    
        [DataMember]
        public TrackableCollection<MatchingSetCategories> MatchingSetCategories
        {
            get
            {
                if (_matchingSetCategories == null)
                {
                    _matchingSetCategories = new TrackableCollection<MatchingSetCategories>();
                    _matchingSetCategories.CollectionChanged += FixupMatchingSetCategories;
                }
                return _matchingSetCategories;
            }
            set
            {
                if (!ReferenceEquals(_matchingSetCategories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_matchingSetCategories != null)
                    {
                        _matchingSetCategories.CollectionChanged -= FixupMatchingSetCategories;
                    }
                    _matchingSetCategories = value;
                    if (_matchingSetCategories != null)
                    {
                        _matchingSetCategories.CollectionChanged += FixupMatchingSetCategories;
                    }
                    OnNavigationPropertyChanged("MatchingSetCategories");
                }
            }
        }
        private TrackableCollection<MatchingSetCategories> _matchingSetCategories;
    
        [DataMember]
        public TrackableCollection<Templates> Templates
        {
            get
            {
                if (_templates == null)
                {
                    _templates = new TrackableCollection<Templates>();
                    _templates.CollectionChanged += FixupTemplates;
                }
                return _templates;
            }
            set
            {
                if (!ReferenceEquals(_templates, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_templates != null)
                    {
                        _templates.CollectionChanged -= FixupTemplates;
                    }
                    _templates = value;
                    if (_templates != null)
                    {
                        _templates.CollectionChanged += FixupTemplates;
                    }
                    OnNavigationPropertyChanged("Templates");
                }
            }
        }
        private TrackableCollection<Templates> _templates;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            tbl_ProductCategory1.Clear();
            tbl_ProductCategory2 = null;
            tbl_ProductCategoryFoldLines.Clear();
            MatchingSetCategories.Clear();
            Templates.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void Fixuptbl_ProductCategory2(tbl_ProductCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.tbl_ProductCategory1.Contains(this))
            {
                previousValue.tbl_ProductCategory1.Remove(this);
            }
    
            if (tbl_ProductCategory2 != null)
            {
                if (!tbl_ProductCategory2.tbl_ProductCategory1.Contains(this))
                {
                    tbl_ProductCategory2.tbl_ProductCategory1.Add(this);
                }
    
                ParentCategoryID = tbl_ProductCategory2.ProductCategoryID;
            }
            else if (!skipKeys)
            {
                ParentCategoryID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("tbl_ProductCategory2")
                    && (ChangeTracker.OriginalValues["tbl_ProductCategory2"] == tbl_ProductCategory2))
                {
                    ChangeTracker.OriginalValues.Remove("tbl_ProductCategory2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("tbl_ProductCategory2", previousValue);
                }
                if (tbl_ProductCategory2 != null && !tbl_ProductCategory2.ChangeTracker.ChangeTrackingEnabled)
                {
                    tbl_ProductCategory2.StartTracking();
                }
            }
        }
    
        private void Fixuptbl_ProductCategory1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (tbl_ProductCategory item in e.NewItems)
                {
                    item.tbl_ProductCategory2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("tbl_ProductCategory1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (tbl_ProductCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.tbl_ProductCategory2, this))
                    {
                        item.tbl_ProductCategory2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("tbl_ProductCategory1", item);
                    }
                }
            }
        }
    
        private void Fixuptbl_ProductCategoryFoldLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (tbl_ProductCategoryFoldLines item in e.NewItems)
                {
                    item.tbl_ProductCategory = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("tbl_ProductCategoryFoldLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (tbl_ProductCategoryFoldLines item in e.OldItems)
                {
                    if (ReferenceEquals(item.tbl_ProductCategory, this))
                    {
                        item.tbl_ProductCategory = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("tbl_ProductCategoryFoldLines", item);
                    }
                }
            }
        }
    
        private void FixupMatchingSetCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MatchingSetCategories item in e.NewItems)
                {
                    item.tbl_ProductCategory = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MatchingSetCategories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MatchingSetCategories item in e.OldItems)
                {
                    if (ReferenceEquals(item.tbl_ProductCategory, this))
                    {
                        item.tbl_ProductCategory = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MatchingSetCategories", item);
                    }
                }
            }
        }
    
        private void FixupTemplates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Templates item in e.NewItems)
                {
                    item.tbl_ProductCategory = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Templates", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Templates item in e.OldItems)
                {
                    if (ReferenceEquals(item.tbl_ProductCategory, this))
                    {
                        item.tbl_ProductCategory = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Templates", item);
                    }
                }
            }
        }

        #endregion
    }
}
