//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemplateDesignerModelV2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TemplateDesignerV2Entities : DbContext
    {
        public TemplateDesignerV2Entities()
            : base("name=TemplateDesignerV2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BaseColors> BaseColors { get; set; }
        public virtual DbSet<MatchingSetCategories> MatchingSetCategories { get; set; }
        public virtual DbSet<MatchingSets> MatchingSets { get; set; }
        public virtual DbSet<Tags> Tags { get; set; }
        public virtual DbSet<tbl_ProductCategoryFoldLines> tbl_ProductCategoryFoldLines { get; set; }
        public virtual DbSet<TemplateColorStyles> TemplateColorStyles { get; set; }
        public virtual DbSet<TemplateFontStyles> TemplateFontStyles { get; set; }
        public virtual DbSet<TemplateIndustryTags> TemplateIndustryTags { get; set; }
        public virtual DbSet<TemplateKeywords> TemplateKeywords { get; set; }
        public virtual DbSet<TemplateSide2Templates> TemplateSide2Templates { get; set; }
        public virtual DbSet<TemplateThemeTags> TemplateThemeTags { get; set; }
        public virtual DbSet<vw_getChildCategoriesWithTemplates> vw_getChildCategoriesWithTemplates { get; set; }
        public virtual DbSet<vw_ProductCategoriesLeafNodesWithRes> vw_ProductCategoriesLeafNodesWithRes { get; set; }
        public virtual DbSet<TemplateFonts> TemplateFonts { get; set; }
        public virtual DbSet<CategoryRegions> CategoryRegions { get; set; }
        public virtual DbSet<CategoryTypes> CategoryTypes { get; set; }
        public virtual DbSet<tbl_ProductCategory> tbl_ProductCategory { get; set; }
        public virtual DbSet<vw_ProductCategoriesLeafNodes> vw_ProductCategoriesLeafNodes { get; set; }
        public virtual DbSet<ImagePermissions> ImagePermissions { get; set; }
        public virtual DbSet<CategoryLayouts> CategoryLayouts { get; set; }
        public virtual DbSet<LayoutAttributes> LayoutAttributes { get; set; }
        public virtual DbSet<vw_WebStore_MatchingSets> vw_WebStore_MatchingSets { get; set; }
        public virtual DbSet<Templates> Templates { get; set; }
        public virtual DbSet<TemplateBackgroundImages> TemplateBackgroundImages { get; set; }
        public virtual DbSet<TemplateObjects> TemplateObjects { get; set; }
        public virtual DbSet<TemplatePages> TemplatePages { get; set; }
    
        public virtual ObjectResult<sp_GetTemplateThemeTags_Result> sp_GetTemplateThemeTags(Nullable<int> templateID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTemplateThemeTags_Result>("sp_GetTemplateThemeTags", templateIDParameter);
        }
    
        public virtual ObjectResult<sp_GetTemplateIndustryTags_Result> sp_GetTemplateIndustryTags(Nullable<int> templateID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTemplateIndustryTags_Result>("sp_GetTemplateIndustryTags", templateIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_cloneTemplate(Nullable<int> templateID, Nullable<int> submittedBy, string submittedByName)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("submittedBy", submittedBy) :
                new ObjectParameter("submittedBy", typeof(int));
    
            var submittedByNameParameter = submittedByName != null ?
                new ObjectParameter("submittedByName", submittedByName) :
                new ObjectParameter("submittedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_cloneTemplate", templateIDParameter, submittedByParameter, submittedByNameParameter);
        }
    
        public virtual ObjectResult<TemplateFonts> sp_GetUsedFonts(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateFonts>("sp_GetUsedFonts", productIDParameter);
        }
    
        public virtual ObjectResult<TemplateFonts> sp_GetUsedFonts(Nullable<int> productID, MergeOption mergeOption)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateFonts>("sp_GetUsedFonts", mergeOption, productIDParameter);
        }
    
        public virtual ObjectResult<TemplateFonts> sp_GetUsedFontsUpdated(Nullable<int> templateID, Nullable<int> customerID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateFonts>("sp_GetUsedFontsUpdated", templateIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<TemplateFonts> sp_GetUsedFontsUpdated(Nullable<int> templateID, Nullable<int> customerID, MergeOption mergeOption)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemplateFonts>("sp_GetUsedFontsUpdated", mergeOption, templateIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<sp_SearchTemplate_Result> sp_SearchTemplates(string globalCategoryName, Nullable<int> pageNo, Nullable<int> customerID, Nullable<int> pageSize, string keywords, string industryIDs, Nullable<int> themeStyleID, string baseColors, ObjectParameter pageCount, ObjectParameter searchCount)
        {
            var globalCategoryNameParameter = globalCategoryName != null ?
                new ObjectParameter("GlobalCategoryName", globalCategoryName) :
                new ObjectParameter("GlobalCategoryName", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var industryIDsParameter = industryIDs != null ?
                new ObjectParameter("IndustryIDs", industryIDs) :
                new ObjectParameter("IndustryIDs", typeof(string));
    
            var themeStyleIDParameter = themeStyleID.HasValue ?
                new ObjectParameter("ThemeStyleID", themeStyleID) :
                new ObjectParameter("ThemeStyleID", typeof(int));
    
            var baseColorsParameter = baseColors != null ?
                new ObjectParameter("BaseColors", baseColors) :
                new ObjectParameter("BaseColors", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchTemplate_Result>("sp_SearchTemplates", globalCategoryNameParameter, pageNoParameter, customerIDParameter, pageSizeParameter, keywordsParameter, industryIDsParameter, themeStyleIDParameter, baseColorsParameter, pageCount, searchCount);
        }
    
        public virtual ObjectResult<sp_GetTemplateImages_Result> sp_GetTemplateImages(Nullable<int> isCalledFrom, Nullable<int> imageSetType, Nullable<int> templateID, Nullable<int> contactCompanyID, Nullable<int> contactID, Nullable<int> territory, Nullable<int> pageNumber, Nullable<int> pageSize, string sortColumn, string search, ObjectParameter imageCount)
        {
            var isCalledFromParameter = isCalledFrom.HasValue ?
                new ObjectParameter("isCalledFrom", isCalledFrom) :
                new ObjectParameter("isCalledFrom", typeof(int));
    
            var imageSetTypeParameter = imageSetType.HasValue ?
                new ObjectParameter("imageSetType", imageSetType) :
                new ObjectParameter("imageSetType", typeof(int));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            var contactCompanyIDParameter = contactCompanyID.HasValue ?
                new ObjectParameter("contactCompanyID", contactCompanyID) :
                new ObjectParameter("contactCompanyID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            var territoryParameter = territory.HasValue ?
                new ObjectParameter("territory", territory) :
                new ObjectParameter("territory", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTemplateImages_Result>("sp_GetTemplateImages", isCalledFromParameter, imageSetTypeParameter, templateIDParameter, contactCompanyIDParameter, contactIDParameter, territoryParameter, pageNumberParameter, pageSizeParameter, sortColumnParameter, searchParameter, imageCount);
        }
    
        public virtual int sp_ResizeImages(string p1)
        {
            var p1Parameter = p1 != null ?
                new ObjectParameter("p1", p1) :
                new ObjectParameter("p1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResizeImages", p1Parameter);
        }
    
        public virtual int sp_ResizeImages1(string p1)
        {
            var p1Parameter = p1 != null ?
                new ObjectParameter("p1", p1) :
                new ObjectParameter("p1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResizeImages1", p1Parameter);
        }
    }
}
